package com.test.test2.mapper;


import com.test.test2.dto.CustomerResponse;
import com.test.test2.dto.CustomerRequest;
import com.test.test2.model.Customer;
import com.test.test2.model.ServiceLocation;

import com.test.test2.util.CurrencyConverter;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.Named;

import java.util.List;

@Mapper(componentModel = "spring", uses = {ServiceLocationMapper.class, CurrencyMapper.class}) // MapStruct creates this as a Spring bean
public interface CustomerMapper {

    // --- Mapping for Customer Entity <-> Customer DTOs ---

    @Mapping(target = "id", ignore = true) // ID is generated by DB for creation
    @Mapping(target = "monthlyRateCents", source = "monthlyRate", qualifiedByName = "doubleToCents") // Map Double to Long (cents)
    @Mapping(target = "serviceLocations", ignore = true) // Handled separately (or in service layer during creation)
    @Mapping(target = "createdAt", ignore = true) // Handled by @CreationTimestamp
    @Mapping(target = "invoices", ignore = true)
    @Mapping(target = "payments", ignore = true)
    @Mapping(target = "monthlyBillingStatuses", ignore = true)
    Customer toEntity(CustomerRequest request);

    @Mapping(target = "monthlyRate", source = "monthlyRateCents", qualifiedByName = "centsToDouble") // Map Long (cents) to Double
    CustomerResponse toResponse(Customer customer);

    List<CustomerResponse> toResponseList(List<Customer> customers);


    // --- Partial Update Method ---
    // This allows updating only fields present in the DTO, ignoring nulls for existing fields
    // Useful for PUT/PATCH operations where not all fields are provided.
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "serviceLocations", ignore = true) // Handle nested lists separately if updating
    @Mapping(target = "invoices", ignore = true)
    @Mapping(target = "payments", ignore = true)
    @Mapping(target = "monthlyBillingStatuses", ignore = true)
    @Mapping(target = "monthlyRateCents", source = "monthlyRate", qualifiedByName = "doubleToCents")
    void updateCustomerFromRequest(CustomerRequest request, @MappingTarget Customer customer);
}
